This repository provides all the support code required to deploy a "Developer
Cloud". Its broken up into 3 sequential parts:

Part 1: Python Virtual Environments
===================================

Deploying OpenStack components under development and on aarch64 presents some
challenges. Most notably is that there are no packages to easily deploy. We
instead build python virtual environments for the components we use and deploy
those via Ansible. The virtual environments are actually pretty handy because
we have identical code running everywhere by simply extracting a tar file.

These venvs can be built by running "sudo ./openstack-venvs/build_all.sh" on
a system with the Debian Reference Platform installed.

Part 2: Deploying Ceph
======================

1) Monitors are deployed and the cluster bootstrapped:

  ansible-playbook -K -v -i ./hosts ./site.yml --tags ceph-mon

Check that the cluster is up and running by connecting to one of the monitors
and checking:

  ssh server1
  ceph daemon mon.server1 mon_status

2) OSDs assume a full HD will be dedicated to Ceph at least. A default
configuration if all the servers that will be OSDs have the same HD layout
can be spedified in group_vars/all as follows:

ceph_host_osds:
  - sbX
  - sbY
  - sbZ

If some server has a different configuration, you will specify this in your
host_vars folder, in a file with the name of your server. For example:

$ cat hostvars/server1

ceph_host_osds:
  - sbZ
  - sbY

After configuring the osds are deployed as follows:

  ansible-playbook -K -v -i ./hosts ./site.yml --tags ceph-osd

2.1) In the case of setting up a cluster from scratch where ceph has been installed
previously, there is an option to force the resetting of all the disks (this
option WILL DELETE all the data on the osds specified). This option is not
idempotent. It is safe to use if you have cleanly deployed the machine and
the disk to be used as OSD had a previously installed ceph:

  --extra-vars 'ceph_force_prepare=true'

Part 3: Deploying OpenStack
===========================

OpenStack is deployed using Ansible with the playbook defined in the "ansible"
directory. You'll need to create the files "deployment-vars" and "hosts" to
match your environment. There are examples to help guide you. Once those files
are in place, OpenStack can be deployed with:

  ansible-playbook -K -v -i ./hosts ./site.yml -l <data_host>
  ansible-playbook -K -v -i ./hosts ./site.yml -l <controller_host>
  ansible-playbook -K -v -i ./hosts ./site.yml -l <network_host>
  ansible-playbook -K -v -i ./hosts ./site.yml -l <compute_host>

Part 3: Deploying Zabbix
===========================

Zabbix is deployed using Ansible. Much like OpenStack, you must update the
"deployment-vars" and "hosts" to match your enviroment.

To deploy Zabbix you must have zabbix-api installed "pip install zabbix-api".

It is required you setup a subdomain, for example monitoring.example.com,
for Zabbix to work.


  ansible-playbook -K -v -i ./hosts ./site.yml -l <zabbix_server>
